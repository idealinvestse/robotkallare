"""
Router for realtime AI call endpoints.
"""
import json
from fastapi import APIRouter, WebSocket, Request, Depends, Query
from fastapi.responses import HTMLResponse
from sqlmodel import Session

from app.database import get_session
from app.config import get_settings
from app.realtime.service import RealtimeService

router = APIRouter(prefix="/realtime", tags=["realtime"])
settings = get_settings()


@router.api_route("/incoming-call", methods=["GET", "POST"])
async def handle_incoming_call(
    request: Request, 
    call_sid: str = Query(None),
    call_meta: str = Query(None),
    session: Session = Depends(get_session)
):
    """
    Handle incoming call and return TwiML to connect to Media Stream.
    
    This endpoint is called by Twilio when a call is connected. It returns
    TwiML instructions to connect to our media stream websocket.
    """
    from twilio.twiml.voice_response import VoiceResponse, Connect
    
    # Create TwiML response
    response = VoiceResponse()
    response.say("Please wait while we connect your call to the AI voice assistant.")
    response.pause(length=1)
    
    # Extract host information for the websocket URL
    host = request.headers.get("host", request.url.hostname)
    
    # Determine protocol (ws/wss) based on request
    protocol = "wss" if request.url.scheme == "https" else "ws"
    
    # Create websocket URL with metadata
    ws_url = f"{protocol}://{host}/realtime/media-stream"
    if call_meta:
        ws_url += f"?meta={call_meta}"
    
    # Connect to media stream
    connect = Connect()
    connect.stream(url=ws_url)
    response.append(connect)
    
    return HTMLResponse(content=str(response), media_type="application/xml")


@router.websocket("/media-stream")
async def handle_media_stream(
    websocket: WebSocket, 
    meta: str = Query(None),
    session: Session = Depends(get_session)
):
    """
    Handle WebSocket connections between Twilio Media Streams and OpenAI's Realtime API.
    
    This endpoint manages the bidirectional audio stream:
    1. Accepts the WebSocket connection from Twilio.
    2. Establishes a WebSocket connection to OpenAI's Realtime API.
    3. Forwards incoming audio chunks from Twilio to OpenAI.
    4. Sends audio responses generated by OpenAI back to Twilio.
    5. Handles session initialization and error conditions.
    """
    # Create service instance
    service = RealtimeService(session)
    
    # Handle the media stream
    await service.handle_media_stream(websocket, meta)
