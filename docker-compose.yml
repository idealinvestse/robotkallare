version: '3.8'

# GDial Backend tjänster
services:
  # Backend-databasen
  backend-db:
    image: postgres:14-alpine
    environment:
      - POSTGRES_USER=${DB_USER:-gdial}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-gdialpassword}
      - POSTGRES_DB=${DB_NAME:-gdial}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DB_USER:-gdial}"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - gdial-network
    restart: unless-stopped

  # Backend API-server
  backend-api:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - INSTALL_DEV=${INSTALL_DEV:-false}
    volumes:
      - ./app:/app/app
      - ./static:/app/static
      - ./.env:/app/.env
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-gdial}:${DB_PASSWORD:-gdialpassword}@backend-db:5432/${DB_NAME:-gdial}
      - PUBLIC_URL=${PUBLIC_URL:-http://localhost:3003}
    depends_on:
      backend-db:
        condition: service_healthy
    ports:
      - "${API_PORT:-3003}:3003"
    networks:
      - gdial-network
    restart: unless-stopped
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "3003", "--reload"]

  # Backend CLI-verktyg för testning av samtal
  backend-cli:
    build:
      context: .
      dockerfile: Dockerfile.cli
    volumes:
      - ./config:/app/config
    environment:
      - SQLITE_DB=${SQLITE_DB:-sqlite:///./dialer.db}
      - PUBLIC_URL=${PUBLIC_URL:-http://localhost:3003}
    networks:
      - gdial-network
    depends_on:
      - backend-api
    profiles:
      - backend-tools
    entrypoint: ["/app/docker-entrypoint.sh"]
    command: ["--help"]

  # Frontend applikation (serveras av Nginx)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - "${FRONTEND_PORT:-8080}:80" # Mappa värdport (t.ex. 8080) till containerport 80
    networks:
      - gdial-network
    profiles:
      - frontend
    restart: unless-stopped

  # Backend Worker för asynkrona jobb
  backend-worker:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./app:/app/app
      - ./.env:/app/.env
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-gdial}:${DB_PASSWORD:-gdialpassword}@backend-db:5432/${DB_NAME:-gdial}
    depends_on:
      backend-db:
        condition: service_healthy
    networks:
      - gdial-network
    restart: unless-stopped
    command: ["python", "-m", "app.outbox_worker"]
    profiles:
      - backend-workers

networks:
  gdial-network:
    driver: bridge

volumes:
  postgres_data:
